  <script>
    const links = [...document.querySelectorAll("[_link]")].map(l => ({
      url: l.getAttribute("href") || l.getAttribute("_link"),
      isNav: l.hasAttribute("_nav"),
      target: document.getElementById(l.getAttribute("_target")),
      el: l,
    }));
    const defaultApp = document.querySelector("[_app]");

    const loader = document.querySelector("[_loader]");
    const loaderOuter = loader?.outerHTML;
    loader?.remove();

    const error = document.querySelector("[_error]");
    const errorOuter = error?.outerHTML;
    error?.remove();


    function updateActiveNav() {
      links.forEach(l => {
        if (!l.isNav) return;
        if (l.url == window.location.pathname || l.url + "/" == window.location.pathname) {
          l.el.classList.add("active");
        } else
          l.el.classList.remove("active");
      })
    }

    async function getContent(l, preventDuplicate = true) {
      if (preventDuplicate && l.url == window.location.pathname) return;
      if (!l.target) {
        if (defaultApp) {
          l.target = defaultApp;
        } else {
          console.error("No target specified for this element", l.el);
          return;
        }
      }

      history.pushState({}, '', l.url);
      updateActiveNav();

      if (loaderOuter)
        l.target.innerHTML = loaderOuter;
      //   await new Promise((res, rej) => setTimeout(res, 3000))

      fetch(l.url).then(async r => {
        const parser = new DOMParser();

        if (!r.ok && errorOuter) {
          const errorParse = parser.parseFromString(errorOuter, "text/html");
          const code = errorParse.querySelector("[_error_code]");
          const message = errorParse.querySelector("[_error_message]");

          if (code) code.innerHTML = r.status;
          if (message) message.innerHTML = r.statusText;

          l.target.innerHTML = errorParse.body.outerHTML;
          return;
        }


        document.querySelectorAll("[_dynamic]").forEach(e => e.remove());

        const html = await r.text();
        const doc = parser.parseFromString(html, 'text/html');

        const outputTarget = l.target == defaultApp ? doc.querySelector("[_app]") : doc.getElementById(l.target.id);
        const content = outputTarget?.innerHTML;

        if (l.url != window.location.pathname) return;

        if (content) {
          const contentParser = parser.parseFromString(content, "text/html");

          const outputScripts = contentParser.querySelectorAll("script");
          outputScripts.forEach(script => {
            const newScript = document.createElement('script');
            if (script.src) {
              newScript.src = script.src;
            } else {
              newScript.textContent = script.textContent;
            }
            newScript.setAttribute("_dynamic", true);
            document.body.appendChild(newScript);

            script.remove();
          });

          contentParser.querySelectorAll("[_static]").forEach(s => s.remove());

          l.target.innerHTML = contentParser.body.innerHTML;
        } else {
          l.target.innerHTML = ""
        }


      });
    }

    links.forEach(l => {
      l.el.addEventListener("click", e => {
        e.preventDefault();
        getContent(l);
      })

    })
    window.addEventListener("popstate", () => {
      const link = links.find(l => l.url == window.location.pathname)
      getContent(link, false)
    })

    updateActiveNav()
  </script>